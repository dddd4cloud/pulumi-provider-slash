# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['ShortcutServiceShortcutArgs', 'ShortcutServiceShortcut']

@pulumi.input_type
class ShortcutServiceShortcutArgs:
    def __init__(__self__, *,
                 created_time: Optional[pulumi.Input[str]] = None,
                 creator_id: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 link: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 og_metadata: Optional[pulumi.Input['Apiv1OpenGraphMetadataArgs']] = None,
                 row_status: Optional[pulumi.Input['RowStatus']] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 updated_time: Optional[pulumi.Input[str]] = None,
                 view_count: Optional[pulumi.Input[int]] = None,
                 visibility: Optional[pulumi.Input['Visibility']] = None):
        """
        The set of arguments for constructing a ShortcutServiceShortcut resource.
        """
        if created_time is not None:
            pulumi.set(__self__, "created_time", created_time)
        if creator_id is not None:
            pulumi.set(__self__, "creator_id", creator_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if link is not None:
            pulumi.set(__self__, "link", link)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if og_metadata is not None:
            pulumi.set(__self__, "og_metadata", og_metadata)
        if row_status is None:
            row_status = 'ROW_STATUS_UNSPECIFIED'
        if row_status is not None:
            pulumi.set(__self__, "row_status", row_status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if updated_time is not None:
            pulumi.set(__self__, "updated_time", updated_time)
        if view_count is not None:
            pulumi.set(__self__, "view_count", view_count)
        if visibility is None:
            visibility = 'VISIBILITY_UNSPECIFIED'
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_time")

    @created_time.setter
    def created_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_time", value)

    @property
    @pulumi.getter(name="creatorId")
    def creator_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "creator_id")

    @creator_id.setter
    def creator_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "creator_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def link(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "link")

    @link.setter
    def link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ogMetadata")
    def og_metadata(self) -> Optional[pulumi.Input['Apiv1OpenGraphMetadataArgs']]:
        return pulumi.get(self, "og_metadata")

    @og_metadata.setter
    def og_metadata(self, value: Optional[pulumi.Input['Apiv1OpenGraphMetadataArgs']]):
        pulumi.set(self, "og_metadata", value)

    @property
    @pulumi.getter(name="rowStatus")
    def row_status(self) -> Optional[pulumi.Input['RowStatus']]:
        return pulumi.get(self, "row_status")

    @row_status.setter
    def row_status(self, value: Optional[pulumi.Input['RowStatus']]):
        pulumi.set(self, "row_status", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="updatedTime")
    def updated_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "updated_time")

    @updated_time.setter
    def updated_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_time", value)

    @property
    @pulumi.getter(name="viewCount")
    def view_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "view_count")

    @view_count.setter
    def view_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "view_count", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['Visibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['Visibility']]):
        pulumi.set(self, "visibility", value)


class ShortcutServiceShortcut(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 created_time: Optional[pulumi.Input[str]] = None,
                 creator_id: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 link: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 og_metadata: Optional[pulumi.Input[pulumi.InputType['Apiv1OpenGraphMetadataArgs']]] = None,
                 row_status: Optional[pulumi.Input['RowStatus']] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 updated_time: Optional[pulumi.Input[str]] = None,
                 view_count: Optional[pulumi.Input[int]] = None,
                 visibility: Optional[pulumi.Input['Visibility']] = None,
                 __props__=None):
        """
        Create a ShortcutServiceShortcut resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ShortcutServiceShortcutArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ShortcutServiceShortcut resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ShortcutServiceShortcutArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ShortcutServiceShortcutArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 created_time: Optional[pulumi.Input[str]] = None,
                 creator_id: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 link: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 og_metadata: Optional[pulumi.Input[pulumi.InputType['Apiv1OpenGraphMetadataArgs']]] = None,
                 row_status: Optional[pulumi.Input['RowStatus']] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 updated_time: Optional[pulumi.Input[str]] = None,
                 view_count: Optional[pulumi.Input[int]] = None,
                 visibility: Optional[pulumi.Input['Visibility']] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ShortcutServiceShortcutArgs.__new__(ShortcutServiceShortcutArgs)

            __props__.__dict__["created_time"] = created_time
            __props__.__dict__["creator_id"] = creator_id
            __props__.__dict__["description"] = description
            __props__.__dict__["link"] = link
            __props__.__dict__["name"] = name
            __props__.__dict__["og_metadata"] = og_metadata
            if row_status is None:
                row_status = 'ROW_STATUS_UNSPECIFIED'
            __props__.__dict__["row_status"] = row_status
            __props__.__dict__["tags"] = tags
            __props__.__dict__["title"] = title
            __props__.__dict__["updated_time"] = updated_time
            __props__.__dict__["view_count"] = view_count
            if visibility is None:
                visibility = 'VISIBILITY_UNSPECIFIED'
            __props__.__dict__["visibility"] = visibility
            __props__.__dict__["shortcut"] = None
        super(ShortcutServiceShortcut, __self__).__init__(
            'slash:api:ShortcutServiceShortcut',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'ShortcutServiceShortcut':
        """
        Get an existing ShortcutServiceShortcut resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = ShortcutServiceShortcutArgs.__new__(ShortcutServiceShortcutArgs)

        __props__.__dict__["created_time"] = None
        __props__.__dict__["creator_id"] = None
        __props__.__dict__["description"] = None
        __props__.__dict__["link"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["og_metadata"] = None
        __props__.__dict__["row_status"] = None
        __props__.__dict__["shortcut"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["title"] = None
        __props__.__dict__["updated_time"] = None
        __props__.__dict__["view_count"] = None
        __props__.__dict__["visibility"] = None
        return ShortcutServiceShortcut(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter(name="creatorId")
    def creator_id(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "creator_id")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def link(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "link")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ogMetadata")
    def og_metadata(self) -> pulumi.Output[Optional['outputs.Apiv1OpenGraphMetadata']]:
        return pulumi.get(self, "og_metadata")

    @property
    @pulumi.getter(name="rowStatus")
    def row_status(self) -> pulumi.Output[Optional['RowStatus']]:
        return pulumi.get(self, "row_status")

    @property
    @pulumi.getter
    def shortcut(self) -> pulumi.Output[Optional['outputs.Apiv1Shortcut']]:
        return pulumi.get(self, "shortcut")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def title(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="updatedTime")
    def updated_time(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "updated_time")

    @property
    @pulumi.getter(name="viewCount")
    def view_count(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "view_count")

    @property
    @pulumi.getter
    def visibility(self) -> pulumi.Output[Optional['Visibility']]:
        return pulumi.get(self, "visibility")

