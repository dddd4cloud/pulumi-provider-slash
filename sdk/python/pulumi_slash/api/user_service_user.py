# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = ['UserServiceUserArgs', 'UserServiceUser']

@pulumi.input_type
class UserServiceUserArgs:
    def __init__(__self__, *,
                 created_time: Optional[pulumi.Input[str]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 nickname: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input['Role']] = None,
                 row_status: Optional[pulumi.Input['RowStatus']] = None,
                 updated_time: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a UserServiceUser resource.
        """
        if created_time is not None:
            pulumi.set(__self__, "created_time", created_time)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if nickname is not None:
            pulumi.set(__self__, "nickname", nickname)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if role is None:
            role = 'ROLE_UNSPECIFIED'
        if role is not None:
            pulumi.set(__self__, "role", role)
        if row_status is None:
            row_status = 'ROW_STATUS_UNSPECIFIED'
        if row_status is not None:
            pulumi.set(__self__, "row_status", row_status)
        if updated_time is not None:
            pulumi.set(__self__, "updated_time", updated_time)

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_time")

    @created_time.setter
    def created_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_time", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def nickname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nickname")

    @nickname.setter
    def nickname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nickname", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input['Role']]:
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input['Role']]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="rowStatus")
    def row_status(self) -> Optional[pulumi.Input['RowStatus']]:
        return pulumi.get(self, "row_status")

    @row_status.setter
    def row_status(self, value: Optional[pulumi.Input['RowStatus']]):
        pulumi.set(self, "row_status", value)

    @property
    @pulumi.getter(name="updatedTime")
    def updated_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "updated_time")

    @updated_time.setter
    def updated_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_time", value)


class UserServiceUser(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 created_time: Optional[pulumi.Input[str]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 nickname: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input['Role']] = None,
                 row_status: Optional[pulumi.Input['RowStatus']] = None,
                 updated_time: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a UserServiceUser resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[UserServiceUserArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a UserServiceUser resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param UserServiceUserArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UserServiceUserArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 created_time: Optional[pulumi.Input[str]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 nickname: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input['Role']] = None,
                 row_status: Optional[pulumi.Input['RowStatus']] = None,
                 updated_time: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UserServiceUserArgs.__new__(UserServiceUserArgs)

            __props__.__dict__["created_time"] = created_time
            __props__.__dict__["email"] = email
            __props__.__dict__["nickname"] = nickname
            __props__.__dict__["password"] = password
            if role is None:
                role = 'ROLE_UNSPECIFIED'
            __props__.__dict__["role"] = role
            if row_status is None:
                row_status = 'ROW_STATUS_UNSPECIFIED'
            __props__.__dict__["row_status"] = row_status
            __props__.__dict__["updated_time"] = updated_time
            __props__.__dict__["user"] = None
        super(UserServiceUser, __self__).__init__(
            'slash:api:UserServiceUser',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'UserServiceUser':
        """
        Get an existing UserServiceUser resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = UserServiceUserArgs.__new__(UserServiceUserArgs)

        __props__.__dict__["created_time"] = None
        __props__.__dict__["email"] = None
        __props__.__dict__["nickname"] = None
        __props__.__dict__["password"] = None
        __props__.__dict__["role"] = None
        __props__.__dict__["row_status"] = None
        __props__.__dict__["updated_time"] = None
        __props__.__dict__["user"] = None
        return UserServiceUser(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter
    def email(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def nickname(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "nickname")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def role(self) -> pulumi.Output[Optional['Role']]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="rowStatus")
    def row_status(self) -> pulumi.Output[Optional['RowStatus']]:
        return pulumi.get(self, "row_status")

    @property
    @pulumi.getter(name="updatedTime")
    def updated_time(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "updated_time")

    @property
    @pulumi.getter
    def user(self) -> pulumi.Output[Optional['outputs.V1User']]:
        return pulumi.get(self, "user")

