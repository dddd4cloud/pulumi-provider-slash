// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package api

import (
	"context"
	"reflect"

	"github.com/dddd4cloud/pulumi-provider-slash/sdk/go/slash/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type UserServiceUser struct {
	pulumi.CustomResourceState

	CreatedTime pulumi.StringPtrOutput `pulumi:"createdTime"`
	Email       pulumi.StringPtrOutput `pulumi:"email"`
	Nickname    pulumi.StringPtrOutput `pulumi:"nickname"`
	Password    pulumi.StringPtrOutput `pulumi:"password"`
	Role        RolePtrOutput          `pulumi:"role"`
	RowStatus   RowStatusPtrOutput     `pulumi:"rowStatus"`
	UpdatedTime pulumi.StringPtrOutput `pulumi:"updatedTime"`
	User        V1UserPtrOutput        `pulumi:"user"`
}

// NewUserServiceUser registers a new resource with the given unique name, arguments, and options.
func NewUserServiceUser(ctx *pulumi.Context,
	name string, args *UserServiceUserArgs, opts ...pulumi.ResourceOption) (*UserServiceUser, error) {
	if args == nil {
		args = &UserServiceUserArgs{}
	}

	if args.Role == nil {
		args.Role = Role("ROLE_UNSPECIFIED")
	}
	if args.RowStatus == nil {
		args.RowStatus = RowStatus("ROW_STATUS_UNSPECIFIED")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UserServiceUser
	err := ctx.RegisterResource("slash:api:UserServiceUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserServiceUser gets an existing UserServiceUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserServiceUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserServiceUserState, opts ...pulumi.ResourceOption) (*UserServiceUser, error) {
	var resource UserServiceUser
	err := ctx.ReadResource("slash:api:UserServiceUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserServiceUser resources.
type userServiceUserState struct {
}

type UserServiceUserState struct {
}

func (UserServiceUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*userServiceUserState)(nil)).Elem()
}

type userServiceUserArgs struct {
	CreatedTime *string    `pulumi:"createdTime"`
	Email       *string    `pulumi:"email"`
	Nickname    *string    `pulumi:"nickname"`
	Password    *string    `pulumi:"password"`
	Role        *Role      `pulumi:"role"`
	RowStatus   *RowStatus `pulumi:"rowStatus"`
	UpdatedTime *string    `pulumi:"updatedTime"`
}

// The set of arguments for constructing a UserServiceUser resource.
type UserServiceUserArgs struct {
	CreatedTime pulumi.StringPtrInput
	Email       pulumi.StringPtrInput
	Nickname    pulumi.StringPtrInput
	Password    pulumi.StringPtrInput
	Role        RolePtrInput
	RowStatus   RowStatusPtrInput
	UpdatedTime pulumi.StringPtrInput
}

func (UserServiceUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userServiceUserArgs)(nil)).Elem()
}

type UserServiceUserInput interface {
	pulumi.Input

	ToUserServiceUserOutput() UserServiceUserOutput
	ToUserServiceUserOutputWithContext(ctx context.Context) UserServiceUserOutput
}

func (*UserServiceUser) ElementType() reflect.Type {
	return reflect.TypeOf((**UserServiceUser)(nil)).Elem()
}

func (i *UserServiceUser) ToUserServiceUserOutput() UserServiceUserOutput {
	return i.ToUserServiceUserOutputWithContext(context.Background())
}

func (i *UserServiceUser) ToUserServiceUserOutputWithContext(ctx context.Context) UserServiceUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserServiceUserOutput)
}

type UserServiceUserOutput struct{ *pulumi.OutputState }

func (UserServiceUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserServiceUser)(nil)).Elem()
}

func (o UserServiceUserOutput) ToUserServiceUserOutput() UserServiceUserOutput {
	return o
}

func (o UserServiceUserOutput) ToUserServiceUserOutputWithContext(ctx context.Context) UserServiceUserOutput {
	return o
}

func (o UserServiceUserOutput) CreatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserServiceUser) pulumi.StringPtrOutput { return v.CreatedTime }).(pulumi.StringPtrOutput)
}

func (o UserServiceUserOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserServiceUser) pulumi.StringPtrOutput { return v.Email }).(pulumi.StringPtrOutput)
}

func (o UserServiceUserOutput) Nickname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserServiceUser) pulumi.StringPtrOutput { return v.Nickname }).(pulumi.StringPtrOutput)
}

func (o UserServiceUserOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserServiceUser) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

func (o UserServiceUserOutput) Role() RolePtrOutput {
	return o.ApplyT(func(v *UserServiceUser) RolePtrOutput { return v.Role }).(RolePtrOutput)
}

func (o UserServiceUserOutput) RowStatus() RowStatusPtrOutput {
	return o.ApplyT(func(v *UserServiceUser) RowStatusPtrOutput { return v.RowStatus }).(RowStatusPtrOutput)
}

func (o UserServiceUserOutput) UpdatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserServiceUser) pulumi.StringPtrOutput { return v.UpdatedTime }).(pulumi.StringPtrOutput)
}

func (o UserServiceUserOutput) User() V1UserPtrOutput {
	return o.ApplyT(func(v *UserServiceUser) V1UserPtrOutput { return v.User }).(V1UserPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserServiceUserInput)(nil)).Elem(), &UserServiceUser{})
	pulumi.RegisterOutputType(UserServiceUserOutput{})
}
