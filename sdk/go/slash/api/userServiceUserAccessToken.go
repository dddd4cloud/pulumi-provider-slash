// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package api

import (
	"context"
	"reflect"

	"github.com/dddd4cloud/pulumi-provider-slash/sdk/go/slash/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type UserServiceUserAccessToken struct {
	pulumi.CustomResourceState

	AccessToken V1UserAccessTokenPtrOutput `pulumi:"accessToken"`
	// description is the description of the access token.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// expires_at is the expiration time of the access token.
	// If expires_at is not set, the access token will never expire.
	ExpiresAt pulumi.StringPtrOutput `pulumi:"expiresAt"`
}

// NewUserServiceUserAccessToken registers a new resource with the given unique name, arguments, and options.
func NewUserServiceUserAccessToken(ctx *pulumi.Context,
	name string, args *UserServiceUserAccessTokenArgs, opts ...pulumi.ResourceOption) (*UserServiceUserAccessToken, error) {
	if args == nil {
		args = &UserServiceUserAccessTokenArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UserServiceUserAccessToken
	err := ctx.RegisterResource("slash:api:UserServiceUserAccessToken", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserServiceUserAccessToken gets an existing UserServiceUserAccessToken resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserServiceUserAccessToken(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserServiceUserAccessTokenState, opts ...pulumi.ResourceOption) (*UserServiceUserAccessToken, error) {
	var resource UserServiceUserAccessToken
	err := ctx.ReadResource("slash:api:UserServiceUserAccessToken", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserServiceUserAccessToken resources.
type userServiceUserAccessTokenState struct {
}

type UserServiceUserAccessTokenState struct {
}

func (UserServiceUserAccessTokenState) ElementType() reflect.Type {
	return reflect.TypeOf((*userServiceUserAccessTokenState)(nil)).Elem()
}

type userServiceUserAccessTokenArgs struct {
	// description is the description of the access token.
	Description *string `pulumi:"description"`
	// expires_at is the expiration time of the access token.
	// If expires_at is not set, the access token will never expire.
	ExpiresAt *string `pulumi:"expiresAt"`
	// id is the user id.
	Id *string `pulumi:"id"`
}

// The set of arguments for constructing a UserServiceUserAccessToken resource.
type UserServiceUserAccessTokenArgs struct {
	// description is the description of the access token.
	Description pulumi.StringPtrInput
	// expires_at is the expiration time of the access token.
	// If expires_at is not set, the access token will never expire.
	ExpiresAt pulumi.StringPtrInput
	// id is the user id.
	Id pulumi.StringPtrInput
}

func (UserServiceUserAccessTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userServiceUserAccessTokenArgs)(nil)).Elem()
}

type UserServiceUserAccessTokenInput interface {
	pulumi.Input

	ToUserServiceUserAccessTokenOutput() UserServiceUserAccessTokenOutput
	ToUserServiceUserAccessTokenOutputWithContext(ctx context.Context) UserServiceUserAccessTokenOutput
}

func (*UserServiceUserAccessToken) ElementType() reflect.Type {
	return reflect.TypeOf((**UserServiceUserAccessToken)(nil)).Elem()
}

func (i *UserServiceUserAccessToken) ToUserServiceUserAccessTokenOutput() UserServiceUserAccessTokenOutput {
	return i.ToUserServiceUserAccessTokenOutputWithContext(context.Background())
}

func (i *UserServiceUserAccessToken) ToUserServiceUserAccessTokenOutputWithContext(ctx context.Context) UserServiceUserAccessTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserServiceUserAccessTokenOutput)
}

type UserServiceUserAccessTokenOutput struct{ *pulumi.OutputState }

func (UserServiceUserAccessTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserServiceUserAccessToken)(nil)).Elem()
}

func (o UserServiceUserAccessTokenOutput) ToUserServiceUserAccessTokenOutput() UserServiceUserAccessTokenOutput {
	return o
}

func (o UserServiceUserAccessTokenOutput) ToUserServiceUserAccessTokenOutputWithContext(ctx context.Context) UserServiceUserAccessTokenOutput {
	return o
}

func (o UserServiceUserAccessTokenOutput) AccessToken() V1UserAccessTokenPtrOutput {
	return o.ApplyT(func(v *UserServiceUserAccessToken) V1UserAccessTokenPtrOutput { return v.AccessToken }).(V1UserAccessTokenPtrOutput)
}

// description is the description of the access token.
func (o UserServiceUserAccessTokenOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserServiceUserAccessToken) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// expires_at is the expiration time of the access token.
// If expires_at is not set, the access token will never expire.
func (o UserServiceUserAccessTokenOutput) ExpiresAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserServiceUserAccessToken) pulumi.StringPtrOutput { return v.ExpiresAt }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserServiceUserAccessTokenInput)(nil)).Elem(), &UserServiceUserAccessToken{})
	pulumi.RegisterOutputType(UserServiceUserAccessTokenOutput{})
}
