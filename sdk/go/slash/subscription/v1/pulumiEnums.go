// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type V1SubscriptionPlan string

const (
	V1SubscriptionPlanPlanTypeUnspecified = V1SubscriptionPlan("PLAN_TYPE_UNSPECIFIED")
	V1SubscriptionPlanFree                = V1SubscriptionPlan("FREE")
	V1SubscriptionPlanPro                 = V1SubscriptionPlan("PRO")
)

type V1SubscriptionPlanOutput struct{ *pulumi.OutputState }

func (V1SubscriptionPlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*V1SubscriptionPlan)(nil)).Elem()
}

func (o V1SubscriptionPlanOutput) ToV1SubscriptionPlanOutput() V1SubscriptionPlanOutput {
	return o
}

func (o V1SubscriptionPlanOutput) ToV1SubscriptionPlanOutputWithContext(ctx context.Context) V1SubscriptionPlanOutput {
	return o
}

func (o V1SubscriptionPlanOutput) ToV1SubscriptionPlanPtrOutput() V1SubscriptionPlanPtrOutput {
	return o.ToV1SubscriptionPlanPtrOutputWithContext(context.Background())
}

func (o V1SubscriptionPlanOutput) ToV1SubscriptionPlanPtrOutputWithContext(ctx context.Context) V1SubscriptionPlanPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v V1SubscriptionPlan) *V1SubscriptionPlan {
		return &v
	}).(V1SubscriptionPlanPtrOutput)
}

func (o V1SubscriptionPlanOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o V1SubscriptionPlanOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e V1SubscriptionPlan) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o V1SubscriptionPlanOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o V1SubscriptionPlanOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e V1SubscriptionPlan) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type V1SubscriptionPlanPtrOutput struct{ *pulumi.OutputState }

func (V1SubscriptionPlanPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**V1SubscriptionPlan)(nil)).Elem()
}

func (o V1SubscriptionPlanPtrOutput) ToV1SubscriptionPlanPtrOutput() V1SubscriptionPlanPtrOutput {
	return o
}

func (o V1SubscriptionPlanPtrOutput) ToV1SubscriptionPlanPtrOutputWithContext(ctx context.Context) V1SubscriptionPlanPtrOutput {
	return o
}

func (o V1SubscriptionPlanPtrOutput) Elem() V1SubscriptionPlanOutput {
	return o.ApplyT(func(v *V1SubscriptionPlan) V1SubscriptionPlan {
		if v != nil {
			return *v
		}
		var ret V1SubscriptionPlan
		return ret
	}).(V1SubscriptionPlanOutput)
}

func (o V1SubscriptionPlanPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o V1SubscriptionPlanPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *V1SubscriptionPlan) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(V1SubscriptionPlanOutput{})
	pulumi.RegisterOutputType(V1SubscriptionPlanPtrOutput{})
}
